/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. All changes should be made through the "yarn migrate" command.
 * TypeScript typings for dandiset metadata are based on schema v0.5.2 (https://raw.githubusercontent.com/dandi/schema/master/releases/0.5.2/dandiset.json)
 */

/**
 * Uniform resource identifier
 */
export type ID = string;
export type SchemaKey = "Dandiset";
export type SchemaVersion = string;
/**
 * A title associated with the Dandiset.
 */
export type DandisetTitle = string;
/**
 * A description of the Dandiset
 */
export type Description = string;
/**
 * People or Organizations that have contributed to this Dandiset.
 */
export type DandisetContributors = [Person | Organization, ...(Person | Organization)[]];
/**
 * Uniform resource identifier
 */
export type ID1 = string;
export type SchemaKey1 = "Person";
/**
 * An ORCID (orcid.org) identifier for an individual.
 */
export type AnORCIDIdentifier = string;
/**
 * Use the format: familyname, given names ...
 */
export type Name = string;
export type Email = string;
export type URL = string;
/**
 * An enumeration of roles
 */
export type RoleType =
  | "dcite:Author"
  | "dcite:Conceptualization"
  | "dcite:ContactPerson"
  | "dcite:DataCollector"
  | "dcite:DataCurator"
  | "dcite:DataManager"
  | "dcite:FormalAnalysis"
  | "dcite:FundingAcquisition"
  | "dcite:Investigation"
  | "dcite:Maintainer"
  | "dcite:Methodology"
  | "dcite:Producer"
  | "dcite:ProjectLeader"
  | "dcite:ProjectManager"
  | "dcite:ProjectMember"
  | "dcite:ProjectAdministration"
  | "dcite:Researcher"
  | "dcite:Resources"
  | "dcite:Software"
  | "dcite:Supervision"
  | "dcite:Validation"
  | "dcite:Visualization"
  | "dcite:Funder"
  | "dcite:Sponsor"
  | "dcite:StudyParticipant"
  | "dcite:Affiliation"
  | "dcite:EthicsApproval"
  | "dcite:Other";
/**
 * Role(s) of the contributor. Multiple roles can be selected.
 */
export type Role = RoleType[];
/**
 * A flag to indicate whether a contributor should be included when generating a citation for the item.
 */
export type IncludeContributorInCitation = boolean;
/**
 * Identifier associated with a sponsored or gift award.
 */
export type IdentifierForAnAward = string;
/**
 * Uniform resource identifier
 */
export type ID2 = string;
export type SchemaKey2 = "Affiliation";
/**
 * Use an ror.org identifier for institutions.
 */
export type ARorOrgIdentifier = string;
/**
 * Name of organization
 */
export type Name1 = string;
/**
 * An organization that this person is affiliated with.
 */
export type Affiliation = Affiliation1[];
/**
 * Uniform resource identifier
 */
export type ID3 = string;
export type SchemaKey3 = "Organization";
/**
 * Use an ror.org identifier for institutions.
 */
export type ARorOrgIdentifier1 = string;
export type Name2 = string;
export type Email1 = string;
export type URL1 = string;
/**
 * Role(s) of the contributor. Multiple roles can be selected.
 */
export type Role1 = RoleType[];
/**
 * A flag to indicate whether a contributor should be included when generating a citation for the item
 */
export type IncludeContributorInCitation1 = boolean;
/**
 * Identifier associated with a sponsored or gift award.
 */
export type IdentifierForAnAward1 = string;
/**
 * Uniform resource identifier
 */
export type ID4 = string;
export type SchemaKey4 = "ContactPoint";
/**
 * Email address of contact.
 */
export type Email2 = string;
/**
 * A Web page to find information on how to contact.
 */
export type URL2 = string;
/**
 * Contact for the organization
 */
export type OrganizationContactInformation = ContactPoint[];
/**
 * Uniform resource identifier
 */
export type Id = string;
export type Schemakey = "Disorder";
/**
 * The identifier can be any url or a compact URI, preferably supported by identifiers.org.
 */
export type Identifier = string;
/**
 * The name of the item.
 */
export type Name3 = string;
/**
 * Dates of diagnosis
 */
export type DatesOfDiagnosis = (string | string)[];
/**
 * Uniform resource identifier
 */
export type Id1 = string;
export type Schemakey1 = "Anatomy";
/**
 * The identifier can be any url or a compact URI, preferably supported by identifiers.org.
 */
export type Identifier1 = string;
/**
 * The name of the item.
 */
export type Name4 = string;
/**
 * Uniform resource identifier
 */
export type Id2 = string;
export type Schemakey2 = "GenericType";
/**
 * The identifier can be any url or a compact URI, preferably supported by identifiers.org.
 */
export type Identifier2 = string;
/**
 * The name of the item.
 */
export type Name5 = string;
/**
 * The subject matter of the content, such as disorders, brain anatomy.
 */
export type SubjectMatterOfTheDataset = (Disorder | Anatomy | GenericType)[];
/**
 * Objectives or specific questions of the study.
 */
export type StudyTarget = string[];
/**
 * Licenses associated with the item. DANDI only supports a subset of Creative Commons Licenses (creativecommons.org) applicable to datasets.
 */
export type License = [LicenseType, ...LicenseType[]];
/**
 * An enumeration of supported licenses
 */
export type LicenseType = "spdx:CC0-1.0" | "spdx:CC-BY-4.0";
/**
 * A list of persistent URLs describing the protocol (e.g. protocols.io, or other DOIs).
 */
export type Protocol = string[];
/**
 * Uniform resource identifier
 */
export type ID5 = string;
export type SchemaKey5 = "EthicsApproval";
/**
 * Approved Protocol identifier, often a number or alphanumeric string.
 */
export type ApprovedProtocolIdentifier = string;
export type EthicsApprovals = EthicsApproval[];
/**
 * Keywords used to describe this content.
 */
export type Keywords = string[];
export type Acknowledgement = string;
/**
 * Uniform resource identifier
 */
export type ID6 = string;
export type SchemaKey6 = "AccessRequirements";
/**
 * The access status of the item.
 */
export type AccessStatus = "dandi:OpenAccess";
/**
 * Information about access requirements when embargoed or restricted
 */
export type Description1 = string;
/**
 * Date on which embargo ends.
 */
export type EmbargoEndDate = string;
export type AccessInformation = AccessRequirements[];
/**
 * permalink to the item
 */
export type URL3 = string;
/**
 * location of the item
 */
export type Repository = string;
/**
 * Uniform resource identifier
 */
export type ID7 = string;
export type SchemaKey7 = "Resource";
export type Identifier3 = string;
export type ATitleOfTheResource = string;
export type URLOfTheResource = string;
/**
 * Name of the repository in which the resource is housed.
 */
export type NameOfTheRepository = string;
/**
 * Indicates how the resource is related to the dataset. This relation should satisfy: dandiset <relation> resource.
 */
export type ResourceRelation =
  | "dcite:IsCitedBy"
  | "dcite:Cites"
  | "dcite:IsSupplementTo"
  | "dcite:IsSupplementedBy"
  | "dcite:IsContinuedBy"
  | "dcite:Continues"
  | "dcite:Describes"
  | "dcite:IsDescribedBy"
  | "dcite:HasMetadata"
  | "dcite:IsMetadataFor"
  | "dcite:HasVersion"
  | "dcite:IsVersionOf"
  | "dcite:IsNewVersionOf"
  | "dcite:IsPreviousVersionOf"
  | "dcite:IsPartOf"
  | "dcite:HasPart"
  | "dcite:IsReferencedBy"
  | "dcite:References"
  | "dcite:IsDocumentedBy"
  | "dcite:Documents"
  | "dcite:IsCompiledBy"
  | "dcite:Compiles"
  | "dcite:IsVariantFormOf"
  | "dcite:IsOriginalFormOf"
  | "dcite:IsIdenticalTo"
  | "dcite:IsReviewedBy"
  | "dcite:Reviews"
  | "dcite:IsDerivedFrom"
  | "dcite:IsSourceOf"
  | "dcite:IsRequiredBy"
  | "dcite:Requires"
  | "dcite:Obsoletes"
  | "dcite:IsObsoletedBy"
  | "dcite:IsPublishedIn";
export type RelatedResource = Resource[];
/**
 * Uniform resource identifier
 */
export type ID8 = string;
export type SchemaKey8 = "Project";
export type Identifier4 = string;
/**
 * The name of the project that generated this Dandiset or asset.
 */
export type NameOfProject = string;
/**
 * A brief description of the project.
 */
export type Description2 = string;
export type StartDate = string;
export type EndDate = string;
/**
 * Uniform resource identifier
 */
export type ID9 = string;
export type SchemaKey9 = "Software";
/**
 * RRID of the software from scicrunch.org.
 */
export type ResearchResourceIdentifier = string;
export type Name6 = string;
export type Version = string;
/**
 * Web page for the software.
 */
export type URL4 = string;
/**
 * Uniform resource identifier
 */
export type ID10 = string;
export type SchemaKey10 = "Agent";
/**
 * Identifier for an agent.
 */
export type Identifier5 = string;
export type Name7 = string;
export type URL5 = string;
export type WasAssociatedWith = (Person | Organization | Software | Agent)[];
/**
 * Uniform resource identifier
 */
export type ID11 = string;
export type SchemaKey11 = "Equipment";
export type Identifier6 = string;
/**
 * A name for the equipment.
 */
export type Title = string;
/**
 * The description of the equipment.
 */
export type Description3 = string;
/**
 * A listing of equipment used for the activity.
 */
export type Used = Equipment[];
/**
 * Project(s) that generated this Dandiset.
 */
export type AssociatedProjects = Project[];
/**
 * A Dandiset identifier that can be resolved by identifiers.org.
 */
export type DandisetIdentifier = string;
export type DandisetCreationDateAndTime = string;
export type LastModificationDateAndTime = string;
export type Citation = string;
/**
 * Uniform resource identifier
 */
export type ID12 = string;
export type SchemaKey12 = "AssetsSummary";
export type NumberOfBytes = number;
export type NumberOfFiles = number;
export type NumberOfSubjects = number;
export type NumberOfSamples = number;
export type NumberOfCells = number;
/**
 * Uniform resource identifier
 */
export type Id3 = string;
export type Schemakey3 = "StandardsType";
/**
 * The identifier can be any url or a compact URI, preferably supported by identifiers.org.
 */
export type Identifier7 = string;
/**
 * The name of the item.
 */
export type Name8 = string;
export type DataStandard = StandardsType[];
/**
 * Uniform resource identifier
 */
export type Id4 = string;
export type Schemakey4 = "ApproachType";
/**
 * The identifier can be any url or a compact URI, preferably supported by identifiers.org.
 */
export type Identifier8 = string;
/**
 * The name of the item.
 */
export type Name9 = string;
export type Approach = ApproachType[];
/**
 * Uniform resource identifier
 */
export type Id5 = string;
export type Schemakey5 = "MeasurementTechniqueType";
/**
 * The identifier can be any url or a compact URI, preferably supported by identifiers.org.
 */
export type Identifier9 = string;
/**
 * The name of the item.
 */
export type Name10 = string;
export type MeasurementTechnique = MeasurementTechniqueType[];
export type VariableMeasured = string[];
/**
 * Uniform resource identifier
 */
export type Id6 = string;
export type Schemakey6 = "SpeciesType";
/**
 * The identifier can be any url or a compact URI, preferably supported by identifiers.org.
 */
export type Identifier10 = string;
/**
 * The name of the item.
 */
export type Name11 = string;
export type Species = SpeciesType[];
export type ManifestLocation = [string, ...string[]];
export type Version1 = string;

/**
 * A body of structured information describing a DANDI dataset.
 */
export interface Dandiset {
  id: ID;
  schemaKey?: SchemaKey;
  schemaVersion?: SchemaVersion;
  name: DandisetTitle;
  description: Description;
  contributor: DandisetContributors;
  about?: SubjectMatterOfTheDataset;
  studyTarget?: StudyTarget;
  license: License;
  protocol?: Protocol;
  ethicsApproval?: EthicsApprovals;
  keywords?: Keywords;
  acknowledgement?: Acknowledgement;
  access?: AccessInformation;
  url?: URL3;
  repository?: Repository;
  relatedResource?: RelatedResource;
  wasGeneratedBy?: AssociatedProjects;
  identifier: DandisetIdentifier;
  dateCreated?: DandisetCreationDateAndTime;
  dateModified?: LastModificationDateAndTime;
  citation: Citation;
  assetsSummary: AssetsSummary;
  manifestLocation: ManifestLocation;
  version: Version1;
  [k: string]: unknown;
}
export interface Person {
  id?: ID1;
  schemaKey?: SchemaKey1;
  identifier?: AnORCIDIdentifier;
  name: Name;
  email?: Email;
  url?: URL;
  roleName?: Role;
  includeInCitation?: IncludeContributorInCitation;
  awardNumber?: IdentifierForAnAward;
  affiliation?: Affiliation;
  [k: string]: unknown;
}
export interface Affiliation1 {
  id?: ID2;
  schemaKey?: SchemaKey2;
  identifier?: ARorOrgIdentifier;
  name: Name1;
  [k: string]: unknown;
}
export interface Organization {
  id?: ID3;
  schemaKey?: SchemaKey3;
  identifier?: ARorOrgIdentifier1;
  name?: Name2;
  email?: Email1;
  url?: URL1;
  roleName?: Role1;
  includeInCitation?: IncludeContributorInCitation1;
  awardNumber?: IdentifierForAnAward1;
  contactPoint?: OrganizationContactInformation;
  [k: string]: unknown;
}
export interface ContactPoint {
  id?: ID4;
  schemaKey?: SchemaKey4;
  email?: Email2;
  url?: URL2;
  [k: string]: unknown;
}
/**
 * Biolink, SNOMED, or other identifier for disorder studied
 */
export interface Disorder {
  id?: Id;
  schemaKey?: Schemakey;
  identifier?: Identifier;
  name?: Name3;
  dxdate?: DatesOfDiagnosis;
  [k: string]: unknown;
}
/**
 * UBERON or other identifier for anatomical part studied
 */
export interface Anatomy {
  id?: Id1;
  schemaKey?: Schemakey1;
  identifier?: Identifier1;
  name?: Name4;
  [k: string]: unknown;
}
/**
 * An object to capture any type for about
 */
export interface GenericType {
  id?: Id2;
  schemaKey?: Schemakey2;
  identifier?: Identifier2;
  name?: Name5;
  [k: string]: unknown;
}
/**
 * Information about ethics committee approval for project
 */
export interface EthicsApproval {
  id?: ID5;
  schemaKey?: SchemaKey5;
  identifier: ApprovedProtocolIdentifier;
  contactPoint?: ContactPoint1;
  [k: string]: unknown;
}
/**
 * Information about the ethics approval committee.
 */
export interface ContactPoint1 {
  id?: ID4;
  schemaKey?: SchemaKey4;
  email?: Email2;
  url?: URL2;
  [k: string]: unknown;
}
/**
 * Information about access options for the dataset
 */
export interface AccessRequirements {
  id?: ID6;
  schemaKey?: SchemaKey6;
  status: AccessStatus;
  contactPoint?: ContactPoint2;
  description?: Description1;
  embargoedUntil?: EmbargoEndDate;
  [k: string]: unknown;
}
/**
 * Who or where to look for information about access.
 */
export interface ContactPoint2 {
  id?: ID4;
  schemaKey?: SchemaKey4;
  email?: Email2;
  url?: URL2;
  [k: string]: unknown;
}
export interface Resource {
  id?: ID7;
  schemaKey?: SchemaKey7;
  identifier?: Identifier3;
  name?: ATitleOfTheResource;
  url?: URLOfTheResource;
  repository?: NameOfTheRepository;
  relation: ResourceRelation;
  [k: string]: unknown;
}
/**
 * Information about the Project activity
 */
export interface Project {
  id?: ID8;
  schemaKey?: SchemaKey8;
  identifier?: Identifier4;
  name: NameOfProject;
  description?: Description2;
  startDate?: StartDate;
  endDate?: EndDate;
  wasAssociatedWith?: WasAssociatedWith;
  used?: Used;
  [k: string]: unknown;
}
export interface Software {
  id?: ID9;
  schemaKey?: SchemaKey9;
  identifier?: ResearchResourceIdentifier;
  name: Name6;
  version: Version;
  url?: URL4;
  [k: string]: unknown;
}
export interface Agent {
  id?: ID10;
  schemaKey?: SchemaKey10;
  identifier?: Identifier5;
  name: Name7;
  url?: URL5;
  [k: string]: unknown;
}
export interface Equipment {
  id?: ID11;
  schemaKey?: SchemaKey11;
  identifier?: Identifier6;
  name: Title;
  description?: Description3;
  [k: string]: unknown;
}
/**
 * Summary over assets contained in a dandiset (published or not)
 */
export interface AssetsSummary {
  id?: ID12;
  schemaKey?: SchemaKey12;
  numberOfBytes: NumberOfBytes;
  numberOfFiles: NumberOfFiles;
  numberOfSubjects?: NumberOfSubjects;
  numberOfSamples?: NumberOfSamples;
  numberOfCells?: NumberOfCells;
  dataStandard?: DataStandard;
  approach?: Approach;
  measurementTechnique?: MeasurementTechnique;
  variableMeasured?: VariableMeasured;
  species?: Species;
  [k: string]: unknown;
}
/**
 * Identifier for data standard used
 */
export interface StandardsType {
  id?: Id3;
  schemaKey?: Schemakey3;
  identifier?: Identifier7;
  name?: Name8;
  [k: string]: unknown;
}
/**
 * Identifier for approach used
 */
export interface ApproachType {
  id?: Id4;
  schemaKey?: Schemakey4;
  identifier?: Identifier8;
  name?: Name9;
  [k: string]: unknown;
}
/**
 * Identifier for measurement technique used
 */
export interface MeasurementTechniqueType {
  id?: Id5;
  schemaKey?: Schemakey5;
  identifier?: Identifier9;
  name?: Name10;
  [k: string]: unknown;
}
/**
 * Identifier for species of the sample
 */
export interface SpeciesType {
  id?: Id6;
  schemaKey?: Schemakey6;
  identifier?: Identifier10;
  name?: Name11;
  [k: string]: unknown;
}
