[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

[project]
name = "dandiapi"
requires-python = ">=3.13"
license = "Apache-2.0"
license-files = ["LICENSE", "NOTICE"]
classifiers = ["Private :: Do Not Upload"]
dependencies = [
  "boto3",
  "celery",
  "dandi",  # minimal version is also provided in API /info
  # Pin dandischema to exact version to make explicit which schema version is being used
  "dandischema==0.11.1",  # schema version 0.6.10
  "django[argon2]",
  "django-allauth",
  "django-auth-style",
  "django-click",
  "django-cors-headers",
  "django-environ",
  "django-extensions",
  "django-filter",
  "django-guardian",
  "django-oauth-toolkit",
  "django-resonant-settings[allauth,celery]",
  "django-resonant-utils",
  "django-stubs-ext",
  # TODO: pin djangorestframework until we figure out what the cause of
  # https://github.com/dandi/dandi-archive/issues/1896 is.
  "djangorestframework<3.15.0",
  "drf-extensions",
  "drf-yasg",
  "fsspec[http]",
  "jsonschema",
  "more_itertools",
  "psycopg[binary]",
  "pyyaml",
  "requests",
  "rich",
  "whitenoise[brotli]",
  "zarr-checksum",
  # Production-only
  "django-s3-file-field[s3]",
  "django-storages[s3]",
  "gunicorn",
  "sentry-sdk[celery,django,pure_eval]",
  # Development-only, but required
  "tqdm",
]
dynamic = ["version"]

[project.optional-dependencies]
development = [
  # Runtime dependencies, only needed with "development" settings
  "django-browser-reload",
  "django-debug-toolbar",
  "ipython",
  "watchdog",
  "werkzeug",
]

[dependency-groups]
dev = [
  # Additional developer tools
  # The "dev" dependency group is installed by default,
  # so use this to install "development" extras by default too
  "dandiapi[development]",
  "pre-commit",
  "tox",
  "tox-uv",
]
lint = [
  "ruff",
]
format = [
  "ruff",
]
type = [
  "mypy",
  "boto3-stubs[s3]",
  "celery-types",
  "django-stubs[compatible-mypy]",
  "djangorestframework-stubs",
]
test = [
  "djangorestframework-yaml",
  "Faker",
  "factory-boy",
  "freezegun",
  "pytest",
  "pytest-cov",
  "pytest-django",
  "pytest-factoryboy",
  # Enable with "pytest --memray ..."
  "pytest-memray",
  "pytest-mock",
  # Enable with "pytest --random-order ..."
  "pytest-random-order",
  # Enable with "pytest --count=... ..."
  "pytest-repeat",
]

[tool.hatch.build]
packages = [
  "dandiapi",
]

[tool.hatch.build.targets.sdist]
only-include = [
  "dandiapi",
  # Also include files needed by Heroku:
  "/manage.py",
  "/uv.lock",
  "/.python-version",
  "/Procfile",
  "/gunicorn.conf.py",
]

[tool.hatch.version]
source = "vcs"
raw-options = {version_scheme = "no-guess-dev"}

[tool.mypy]
ignore_missing_imports = true
show_error_codes = true
disable_error_code = ["attr-defined", "var-annotated"]
follow_imports = "skip" # Don't follow imports into other files. This should be removed once all type errors have been resolved.
exclude = [
    "^dandiapi/api/tests/",
    "^dandiapi/api/views/",
    "^dandiapi/zarr/tests/",
]

# Re-enable these when https://github.com/typeddjango/django-stubs/issues/417 is fixed.
# plugins = ["mypy_django_plugin.main", "mypy_drf_plugin.main"]

# [tool.django-stubs]
# django_settings_module = "dandiapi.settings"

[tool.ruff]
line-length = 100
target-version = "py313"

[tool.ruff.lint]
select = ["ALL"]
ignore = [
  # Incompatible with formatter
  # https://docs.astral.sh/ruff/formatter/#conflicting-lint-rules
  "COM812", # missing-trailing-comma
  "COM819", # prohibited-trailing-comma
  "D206", # indent-with-spaces
  "D300", # triple-single-quotes
  "E111", # indentation-with-invalid-multiple
  "E114", # indentation-with-invalid-multiple-comment
  "E117", # over-indented
  "ISC001", # single-line-implicit-string-concatenation
  "ISC002", # multi-line-implicit-string-concatenation
  "Q", # flake8-quotes
  "W191", # tab-indentation

  "A003", # Class attribute is shadowing a Python builtin
  "ANN", # flake8-annotations
  "ARG001", # Unused function argument
  "ARG002", # Unused method argument
  "D1", # Missing docstring
  "EM101", # Exception must not use a string literal, assign to variable first
  "EM102", # Exception must not use an f-string literal, assign to variable first
  "ERA001", # Found commented-out code
  "FIX", # flake8-fixme
  "TD002", # Missing author in TODO
  "TD003", # Missing issue link on the line following this TODO
  "TRY003", # Avoid specifying long messages outside the exception class

  # Try to fix upstream
  "RUF012", #  Mutable class attributes should be annotated with `typing.ClassVar`

  # Fix in DANDI codebase. PR that will fix this:
  # https://github.com/dandi/dandi-archive/pull/1782
  "PTH119", # TODO: re-enable this when it's fixed
  "PLC0415", # `import` should be at the top-level of a file
]

[tool.ruff.lint.per-file-ignores]
"scripts/**" = [
  "INP001", # File is part of an implicit namespace package
]
"**/settings/**" = [
  "F403", # unable to detect undefined names
  "F405", # may be undefined, or defined from star imports
]
"**/migrations/**" = [
  "N806", # Variable in function should be lowercase
  "RUF012", # Mutable class attributes should be annotated with `typing.ClassVar`
]
"**/management/commands/**" = [
  "INP001", # File is part of an implicit namespace package
]
"**/tests/**" = [
  "DJ007", # Do not use `__all__`
  "DJ008", # Model does not define `__str__` method
  "PLR0913", # Too many arguments to function call
  "PLR2004", # Magic value used in comparison
  "S", # flake8-bandit
  "SLF001", # Private member accessed
]

[tool.ruff.format]
quote-style = "single"

[tool.ruff.lint.flake8-self]
extend-ignore-names = ["_base_manager", "_default_manager",  "_meta"]

[tool.ruff.lint.isort]
# Sort by name, don't cluster "from" vs "import"
force-sort-within-sections = true
# Deferred annotations allows TCH rules to move more imports into TYPE_CHECKING blocks
required-imports = ["from __future__ import annotations"]

[tool.ruff.lint.pydocstyle]
convention = "pep257"

[tool.pytest.ini_options]
addopts = [
  # Test utilities should be imported absolutely from the pythonpath,
  # so use the Pytest-recommended "importlib" mode
  "--import-mode=importlib",
  "--strict-config",
  "--strict-markers",
  "--showlocals",
  "--verbose",
  # Specifying as "--ds" will override any value in the environment
  "--ds=dandiapi.settings.testing",
]
filterwarnings = [
  "error",
  # pytest often causes unclosed socket warnings
  "ignore:unclosed <socket\\.socket:ResourceWarning",
  # TODO: Remove this with pytest_factoryboy
  "ignore:Using a <class 'dict'> as model type:UserWarning:pytest_factoryboy.fixture",
]
