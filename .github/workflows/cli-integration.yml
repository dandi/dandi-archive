name: Test Integration with dandi-cli

on:
  push:
    branches:
      - master
    paths-ignore:
      - "web/**"
  pull_request:
    paths-ignore:
      - "web/**"

jobs:
  build-image:
    runs-on: ubuntu-22.04
    steps:
      - name: Check out this repository
        uses: actions/checkout@v4

      - name: Build Docker image
        run: |
          if [ -n "$DOCKER_LOGIN$DOCKER_TOKEN" ]; then
              docker login -u "$DOCKER_LOGIN" --password-stdin <<<"$DOCKER_TOKEN"
          else
              echo "Not logging in to docker since no credentials were provided, might hit limits below"
          fi
          docker build \
            -t dandiarchive/dandiarchive-api \
            -f dev/django-public.Dockerfile \
            .
        env:
          DOCKER_LOGIN: ${{ secrets.DOCKER_LOGIN }}
          DOCKER_TOKEN: ${{ secrets.DOCKER_TOKEN }}

      - name: Export Docker image
        run: |
          docker image save -o dandiarchive-api.tgz dandiarchive/dandiarchive-api

      - name: Upload Docker image tarball
        uses: actions/upload-artifact@v4
        with:
          name: dandiarchive-api.tgz
          path: dandiarchive-api.tgz

  test:
    runs-on: ubuntu-22.04
    needs: build-image
    strategy:
      fail-fast: false
      matrix:
        python:
          - "3.11"
        dandi-version:
          - release
          - master
    env:
      DANDI_ALLOW_LOCALHOST_URLS: 1
      DANDI_TESTS_PULL_DOCKER_COMPOSE: 0
    steps:
      - name: Download Docker image tarball
        uses: actions/download-artifact@v4
        with:
          name: dandiarchive-api.tgz

      - name: Import Docker image
        run: docker image load -i dandiarchive-api.tgz

      - name: Set up Python ${{ matrix.python }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip wheel

      - name: Install released dandi
        if: matrix.dandi-version == 'release'
        run: pip install "dandi[test]"

      - name: Extract CLI PR reference from description
        if: matrix.dandi-version == 'master' && github.event_name == 'pull_request'
        id: cli-pr
        run: |
          if echo "${{ github.event.pull_request.body }}" | grep -i "Requires_CLI_PR:"; then
            CLI_PR_URL=$(echo "${{ github.event.pull_request.body }}" | grep -i "Requires_CLI_PR:" | sed 's/.*Requires_CLI_PR:[[:space:]]*//' | head -1)
            echo "CLI PR URL found: $CLI_PR_URL"
            # Extract PR number from URL (e.g., https://github.com/dandi/dandi-cli/pull/123)
            CLI_PR_NUM=$(echo "$CLI_PR_URL" | grep -o '[0-9]\+$')
            echo "cli_pr_num=$CLI_PR_NUM" >> $GITHUB_OUTPUT
          else
            echo "No CLI PR reference found in description"
            echo "cli_pr_num=" >> $GITHUB_OUTPUT
          fi

      - name: Get CLI PR branch name
        if: matrix.dandi-version == 'master' && steps.cli-pr.outputs.cli_pr_num != ''
        id: cli-branch
        run: |
          CLI_PR_NUM="${{ steps.cli-pr.outputs.cli_pr_num }}"
          echo "Getting branch name for CLI PR #$CLI_PR_NUM"
          BRANCH_NAME=$(curl -s "https://api.github.com/repos/dandi/dandi-cli/pulls/$CLI_PR_NUM" | jq -r '.head.ref')
          echo "Branch name: $BRANCH_NAME"
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT

      - name: Install dev dandi from specific PR branch
        if: matrix.dandi-version == 'master' && steps.cli-branch.outputs.branch_name != '' && steps.cli-branch.outputs.branch_name != 'null'
        run: |
          echo "Installing dandi from PR branch: ${{ steps.cli-branch.outputs.branch_name }}"
          pip install "dandi[test] @ git+https://github.com/dandi/dandi-cli@${{ steps.cli-branch.outputs.branch_name }}"

      - name: Install dev dandi from master
        if: matrix.dandi-version == 'master' && (steps.cli-branch.outputs.branch_name == '' || steps.cli-branch.outputs.branch_name == 'null')
        run: |
          echo "Installing dandi from master branch"
          pip install "dandi[test] @ git+https://github.com/dandi/dandi-cli"

      - name: Run dandi-api tests in dandi-cli
        run: |
          python -m pytest --dandi-api -v \
            "$pythonLocation/lib/python${{ matrix.python }}/site-packages/dandi"
        env:
          DANDI_TESTS_PERSIST_DOCKER_COMPOSE: "1"

      - name: Dump Docker Compose logs
        if: failure()
        run: |
          docker compose \
            -f "$pythonLocation/lib/python${{ matrix.python }}/site-packages/dandi/tests/data/dandiarchive-docker/docker-compose.yml" \
            logs --timestamps

      - name: Shut down Docker Compose
        run: |
          docker compose \
            -f "$pythonLocation/lib/python${{ matrix.python }}/site-packages/dandi/tests/data/dandiarchive-docker/docker-compose.yml" \
            down -v
