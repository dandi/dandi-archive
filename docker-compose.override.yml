services:
  django:
    build:
      context: .
      dockerfile: ./dev/django.Dockerfile
    command: [
      "./manage.py",
      "runserver_plus", "0.0.0.0:8000"
    ]
    # Log printing is enhanced by a TTY
    tty: true
    environment:
      PYTHONDONTWRITEBYTECODE: 1
      PYTHONUNBUFFERED: 1
      TOX_WORK_DIR: /home/vscode/tox
      UV_ENV_FILE: ./dev/.env.docker-compose
      UV_PROJECT_ENVIRONMENT: /home/vscode/uv-env
      UV_CACHE_DIR: /home/vscode/uv/cache
      UV_PYTHON_INSTALL_DIR: /home/vscode/uv/bin
      UV_LINK_MODE: symlink
    working_dir: /home/vscode/dandi
    env_file: ./dev/.env.docker-compose
    volumes:
      - .:/home/vscode/dandi
      - uv_cache:/home/vscode/uv
    ports:
      - 8000:8000
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      minio:
        condition: service_healthy

  celery:
    build:
      context: .
      dockerfile: ./dev/django.Dockerfile
    command: [
      "uv", "run",
      "celery",
      "--app", "dandiapi.celery",
      "worker",
      "--loglevel", "INFO",
      "--without-heartbeat",
      "-Q", "celery,calculate_sha256,ingest_zarr_archive,manifest-worker",
      "-B"
    ]
    # Docker Compose does not set the TTY width, which causes Celery errors
    tty: false
    environment:
      PYTHONDONTWRITEBYTECODE: 1
      PYTHONUNBUFFERED: 1
      TOX_WORK_DIR: /home/vscode/tox
      UV_ENV_FILE: ./dev/.env.docker-compose
      UV_PROJECT_ENVIRONMENT: /home/vscode/uv-env
      UV_CACHE_DIR: /home/vscode/uv/cache
      UV_PYTHON_INSTALL_DIR: /home/vscode/uv/bin
      UV_LINK_MODE: symlink
    working_dir: /home/vscode/dandi
    env_file: ./dev/.env.docker-compose

    volumes:
      - .:/home/vscode/dandi
      - uv_cache:/home/vscode/uv
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      minio:
        condition: service_healthy

volumes:
  uv_cache:
