# Generated by Django 4.2.19 on 2025-04-01 20:57
from __future__ import annotations

from django.db import migrations

# NOTE: This migration must be run separately from the previous migration, or it will fail. This is
# due to the fact that permission creation is done via the `post_migrate` signal, which only runs
# after ALL migrations have been applied successfully.
# https://docs.djangoproject.com/en/5.2/topics/auth/customizing/#custom-permissions


def migrate_owners(apps, schema_editor):
    Dandiset = apps.get_model('api.Dandiset')
    User = apps.get_model('auth.User')
    Group = apps.get_model('auth.Group')
    DandisetGroupObjectPermission = apps.get_model('api.DandisetGroupObjectPermission')
    Permission = apps.get_model('auth.Permission')

    dandisets = Dandiset.objects.all().iterator()
    for dandiset in dandisets:
        ident = f'{dandiset.id:06}'  # re-implemented since we can't access model methods here
        owners_group = Group.objects.create(name=f'Dandiset {ident} Owners')

        # Assign all perms to the owners group
        # Using _meta.permissions is the only good way we can get the permissions list, as
        # DandisetPermissions is inaccessible here.
        perms = [x[0] for x in Dandiset._meta.permissions if x[0] != 'owner']
        for perm in perms:
            DandisetGroupObjectPermission.objects.create(
                content_object=dandiset,
                group=owners_group,
                permission=Permission.objects.get(codename=perm),
            )

        ds_owners = User.objects.filter(
            dandisetuserobjectpermission__permission__codename='owner',
            dandisetuserobjectpermission__content_object=dandiset.pk,
        ).iterator()
        for owner in ds_owners:
            owner.groups.add(owners_group)


def remove_owner_perm(apps, schema_editor):
    Permission = apps.get_model('auth.Permission')
    Permission.objects.filter(codename='owner').delete()


class Migration(migrations.Migration):
    dependencies = [
        ('api', '0018_alter_dandiset_options'),
    ]

    operations = [
        migrations.RunPython(code=migrate_owners),
        migrations.RunPython(code=remove_owner_perm),
    ]
