# Generated by Django 4.1.13 on 2024-01-16 18:31
from __future__ import annotations

from django.db import migrations, models


def migrate_embargoed_asset_blobs(apps, _):
    Asset = apps.get_model('api.Asset')
    AssetBlob = apps.get_model('api.AssetBlob')
    embargoed_assets = Asset.objects.filter(embargoed_blob__isnull=False).select_related(
        'embargoed_blob'
    )

    # For each relevant asset, create a new asset blob with embargoed=True,
    # and point the asset to that
    for asset in embargoed_assets.iterator():
        # Check if the blob we care about already exists (possibly under a different blob_id due to
        # de-duplication).
        # This will handle the following cases:
        #   1. This asset is part of an "asset chain", where multiple assets point to the same blob
        #   2. This blob this asset points to exists across multiple embargoed dandisets under
        #       different blob_ids, due to the lack of cross-dandiset embargo de-duplication.
        #   3. This blob this asset points to already exists as a normal AssetBlob, due to the lack
        #       of de-duplication between open and embargoed dandisets. This is essentially the same
        #       as the above case, but between an embargoed and open dandiset, instead of two
        #       embargoed dandisets.
        #
        # In case #3, the asset will effectively be un-embargoed.
        existing_blob = AssetBlob.objects.filter(
            etag=asset.embargoed_blob.etag, size=asset.embargoed_blob.size
        ).first()
        if existing_blob:
            asset.blob = existing_blob
            asset.embargoed_blob = None
            asset.save()
            continue

        # This asset's blob hasn't been transitioned yet
        blob_id = str(asset.embargoed_blob.blob_id)
        new_blob_location = f'blobs/{blob_id[0:3]}/{blob_id[3:6]}/{blob_id}'
        new_asset_blob = AssetBlob.objects.create(
            embargoed=True,
            blob=new_blob_location,
            blob_id=asset.embargoed_blob.blob_id,
            created=asset.embargoed_blob.created,
            modified=asset.embargoed_blob.modified,
            sha256=asset.embargoed_blob.sha256,
            etag=asset.embargoed_blob.etag,
            size=asset.embargoed_blob.size,
            download_count=asset.embargoed_blob.download_count,
        )
        asset.blob = new_asset_blob
        asset.embargoed_blob = None
        asset.save()

    assert not Asset.objects.filter(embargoed_blob__isnull=False).exists()  # noqa: S101


class Migration(migrations.Migration):
    dependencies = [
        ('api', '0005_null_charfield'),
    ]

    operations = [
        migrations.AddField(
            model_name='assetblob',
            name='embargoed',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='upload',
            name='embargoed',
            field=models.BooleanField(default=False),
        ),
        # Migrate all embargoedassetblobs to assetblobs with embargoed=True
        migrations.RunPython(migrate_embargoed_asset_blobs),
    ]
